apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}
  labels:
    app: {{ .Release.Name }}
spec:
  replicas: {{ .Values.koala.web.replicaCount }}
  selector:
    matchLabels:
      app: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: {{ .Release.Name }}
    spec:
      containers:
        - name: {{ .Release.Name }}
          image: "{{ .Values.koala.web.image.repository }}:{{ .Values.koala.web.image.tag }}"
          imagePullPolicy: {{ .Values.koala.web.image.pullPolicy }}
          ports:
            - containerPort: {{ .Values.koala.web.service.targetPort }}
          command: ["/bin/sh", "-c", "/usr/src/app/entrypoint.sh"]
          env:
            {{- range $key, $value := .Values.koala.web.env }}
            - name: {{ $key }}
              value: "{{ $value }}"
            {{- end }}
          envFrom:
            - secretRef:
                name: {{ .Release.Name }}-env
          livenessProbe:
            httpGet:
              path: /health/
              port: 8000
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /ready/
              port: 8000
            initialDelaySeconds: 10
            periodSeconds: 5
            timeoutSeconds: 3
            failureThreshold: 3
        - name: {{ .Release.Name }}-db-proxy
          image: "alpine/socat"
          command:
            - sh
            - -c
            - "socat tcp-listen:5432,fork,reuseaddr tcp-connect:osdp25w-db.clk664ckemji.ap-northeast-3.rds.amazonaws.com:5432"
          ports:
            - containerPort: 5432
              name: db-proxy
          livenessProbe:
            tcpSocket:
              port: 5432
            initialDelaySeconds: 10
            periodSeconds: 30
            timeoutSeconds: 5
            failureThreshold: 3
          readinessProbe:
            tcpSocket:
              port: 5432
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 3
            failureThreshold: 3
          resources:
            requests:
              memory: "32Mi"
              cpu: "25m"
            limits:
              memory: "64Mi"
              cpu: "50m"

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-mqtt-client
  labels:
    app: {{ .Release.Name }}-mqtt-client
spec:
  replicas: {{ .Values.koala.mqtt.replicaCount }}
  selector:
    matchLabels:
      app: {{ .Release.Name }}-mqtt-client
  template:
    metadata:
      labels:
        app: {{ .Release.Name }}-mqtt-client
    spec:
      containers:
        - name: {{ .Release.Name }}-mqtt-client
          image: "{{ .Values.koala.mqtt.image.repository }}:{{ .Values.koala.mqtt.image.tag }}"
          imagePullPolicy: {{ .Values.koala.mqtt.image.pullPolicy }}
          command: ["/usr/src/app/entrypoint-mqtt-client.sh"]
          env:
            {{- range $key, $value := .Values.koala.mqtt.env }}
            - name: {{ $key }}
              value: "{{ $value }}"
            {{- end }}
          envFrom:
            - secretRef:
                name: {{ .Release.Name }}-env
          livenessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - "pgrep -f 'python manage.py mqtt_client' || exit 1"
            initialDelaySeconds: 30
            periodSeconds: 30
            timeoutSeconds: 5
            failureThreshold: 3
          readinessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - "pgrep -f 'python manage.py mqtt_client' || exit 1"
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 3
            failureThreshold: 3

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-iot-default-worker
  labels:
    app: {{ .Release.Name }}-iot-default-worker
spec:
  replicas: {{ .Values.koala.celery.iot_default_worker.replicaCount }}
  selector:
    matchLabels:
      app: {{ .Release.Name }}-iot-default-worker
  template:
    metadata:
      labels:
        app: {{ .Release.Name }}-iot-default-worker
    spec:
      containers:
        - name: {{ .Release.Name }}-iot-default-worker
          image: "{{ .Values.koala.celery.iot_default_worker.image.repository }}:{{ .Values.koala.celery.iot_default_worker.image.tag }}"
          imagePullPolicy: {{ .Values.koala.celery.iot_default_worker.image.pullPolicy }}
          command: ["/usr/src/app/entrypoint-celery.sh", "{{ .Values.koala.celery.iot_default_worker.concurrency }}", "{{ .Values.koala.celery.iot_default_worker.queue }}"]
          env:
            {{- range $key, $value := .Values.koala.celery.iot_default_worker.env }}
            - name: {{ $key }}
              value: "{{ $value }}"
            {{- end }}
          envFrom:
            - secretRef:
                name: {{ .Release.Name }}-env
          livenessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - "pgrep -f 'celery.*worker' || exit 1"
            initialDelaySeconds: 30
            periodSeconds: 30
            timeoutSeconds: 5
            failureThreshold: 3
          readinessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - "pgrep -f 'celery.*worker' || exit 1"
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 3
            failureThreshold: 3

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-bike-realtime-status-worker
  labels:
    app: {{ .Release.Name }}-bike-realtime-status-worker
spec:
  replicas: {{ .Values.koala.celery.bike_realtime_status_worker.replicaCount }}
  selector:
    matchLabels:
      app: {{ .Release.Name }}-bike-realtime-status-worker
  template:
    metadata:
      labels:
        app: {{ .Release.Name }}-bike-realtime-status-worker
    spec:
      containers:
        - name: {{ .Release.Name }}-bike-realtime-status-worker
          image: "{{ .Values.koala.celery.bike_realtime_status_worker.image.repository }}:{{ .Values.koala.celery.bike_realtime_status_worker.image.tag }}"
          imagePullPolicy: {{ .Values.koala.celery.bike_realtime_status_worker.image.pullPolicy }}
          command: ["/usr/src/app/entrypoint-celery.sh", "{{ .Values.koala.celery.bike_realtime_status_worker.concurrency }}", "{{ .Values.koala.celery.bike_realtime_status_worker.queue }}"]
          env:
            {{- range $key, $value := .Values.koala.celery.bike_realtime_status_worker.env }}
            - name: {{ $key }}
              value: "{{ $value }}"
            {{- end }}
          envFrom:
            - secretRef:
                name: {{ .Release.Name }}-env
          livenessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - "pgrep -f 'celery.*worker' || exit 1"
            initialDelaySeconds: 30
            periodSeconds: 30
            timeoutSeconds: 5
            failureThreshold: 3
          readinessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - "pgrep -f 'celery.*worker' || exit 1"
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 3
            failureThreshold: 3

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-bike-error-log-worker
  labels:
    app: {{ .Release.Name }}-bike-error-log-worker
spec:
  replicas: {{ .Values.koala.celery.bike_error_log_worker.replicaCount }}
  selector:
    matchLabels:
      app: {{ .Release.Name }}-bike-error-log-worker
  template:
    metadata:
      labels:
        app: {{ .Release.Name }}-bike-error-log-worker
    spec:
      containers:
        - name: {{ .Release.Name }}-bike-error-log-worker
          image: "{{ .Values.koala.celery.bike_error_log_worker.image.repository }}:{{ .Values.koala.celery.bike_error_log_worker.image.tag }}"
          imagePullPolicy: {{ .Values.koala.celery.bike_error_log_worker.image.pullPolicy }}
          command: ["/usr/src/app/entrypoint-celery.sh", "{{ .Values.koala.celery.bike_error_log_worker.concurrency }}", "{{ .Values.koala.celery.bike_error_log_worker.queue }}"]
          env:
            {{- range $key, $value := .Values.koala.celery.bike_error_log_worker.env }}
            - name: {{ $key }}
              value: "{{ $value }}"
            {{- end }}
          envFrom:
            - secretRef:
                name: {{ .Release.Name }}-env
          livenessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - "pgrep -f 'celery.*worker' || exit 1"
            initialDelaySeconds: 30
            periodSeconds: 30
            timeoutSeconds: 5
            failureThreshold: 3
          readinessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - "pgrep -f 'celery.*worker' || exit 1"
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 3
            failureThreshold: 3

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-statistics-worker
  labels:
    app: {{ .Release.Name }}-statistics-worker
spec:
  replicas: {{ .Values.koala.celery.statistics_worker.replicaCount }}
  selector:
    matchLabels:
      app: {{ .Release.Name }}-statistics-worker
  template:
    metadata:
      labels:
        app: {{ .Release.Name }}-statistics-worker
    spec:
      containers:
        - name: {{ .Release.Name }}-statistics-worker
          image: "{{ .Values.koala.celery.statistics_worker.image.repository }}:{{ .Values.koala.celery.statistics_worker.image.tag }}"
          imagePullPolicy: {{ .Values.koala.celery.statistics_worker.image.pullPolicy }}
          command: ["/usr/src/app/entrypoint-celery.sh", "{{ .Values.koala.celery.statistics_worker.concurrency }}", "{{ .Values.koala.celery.statistics_worker.queue }}"]
          env:
            {{- range $key, $value := .Values.koala.celery.statistics_worker.env }}
            - name: {{ $key }}
              value: "{{ $value }}"
            {{- end }}
          envFrom:
            - secretRef:
                name: {{ .Release.Name }}-env
          livenessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - "pgrep -f 'celery.*worker' || exit 1"
            initialDelaySeconds: 30
            periodSeconds: 30
            timeoutSeconds: 5
            failureThreshold: 3
          readinessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - "pgrep -f 'celery.*worker' || exit 1"
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 3
            failureThreshold: 3

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-websocket
  labels:
    app: {{ .Release.Name }}-websocket
spec:
  replicas: {{ .Values.koala.websocket.replicaCount }}
  selector:
    matchLabels:
      app: {{ .Release.Name }}-websocket
  template:
    metadata:
      labels:
        app: {{ .Release.Name }}-websocket
    spec:
      containers:
        - name: {{ .Release.Name }}-websocket
          image: "{{ .Values.koala.websocket.image.repository }}:{{ .Values.koala.websocket.image.tag }}"
          imagePullPolicy: {{ .Values.koala.websocket.image.pullPolicy }}
          ports:
            - containerPort: {{ .Values.koala.websocket.service.targetPort }}
          command: ["daphne", "-b", "0.0.0.0", "-p", "{{ .Values.koala.websocket.service.targetPort }}", "koala.asgi:application"]
          env:
            {{- range $key, $value := .Values.koala.websocket.env }}
            - name: {{ $key }}
              value: "{{ $value }}"
            {{- end }}
          envFrom:
            - secretRef:
                name: {{ .Release.Name }}-env
          livenessProbe:
            httpGet:
              path: /health/
              port: 8000
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /ready/
              port: 8000
            initialDelaySeconds: 10
            periodSeconds: 5
            timeoutSeconds: 3
            failureThreshold: 3

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-celery-beat
spec:
  replicas: {{ .Values.koala.celery.beat.replicaCount }}
  selector:
    matchLabels:
      app: {{ .Release.Name }}-celery-beat
  template:
    metadata:
      labels:
        app: {{ .Release.Name }}-celery-beat
    spec:
      containers:
        - name: {{ .Release.Name }}-celery-beat
          image: "{{ .Values.koala.celery.beat.image.repository }}:{{ .Values.koala.celery.beat.image.tag }}"
          imagePullPolicy: {{ .Values.koala.celery.beat.image.pullPolicy }}
          command: [
            "celery",
            "-A",
            "koala",
            "beat",
            "--loglevel=info",
            "--scheduler=django_celery_beat.schedulers:DatabaseScheduler"
          ]
          env:
            {{- range $key, $value := .Values.koala.celery.beat.env }}
            - name: {{ $key }}
              value: "{{ $value }}"
            {{- end }}
          envFrom:
            - secretRef:
                name: {{ .Release.Name }}-env
          readinessProbe:
            exec:
              command:
                - sh
                - -c
                - 'pgrep -f "celery beat"'
            initialDelaySeconds: 30
            periodSeconds: 30
            timeoutSeconds: 10
            failureThreshold: 3
          livenessProbe:
            exec:
              command:
                - sh
                - -c
                - 'pgrep -f "celery beat"'
            initialDelaySeconds: 30
            periodSeconds: 30
            timeoutSeconds: 10
            failureThreshold: 3